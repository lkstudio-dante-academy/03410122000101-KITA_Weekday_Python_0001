import os
import sys

"""
자료형 (Data Type) 이란?
- 데이터를 해석하는 방법을 의미한다. (+ 즉, 동일한 형태의 데이터라고 하더라도 자료형에 따라 처리 방식이
달라진다는 것을 알 수 있다.)

또한 자료형은 데이터가 표현 할 수 있는 최대 범위를 제한하는 역할을 수행한다. (+ 즉, 자료형마다 데이터의 최대
표현 범위가 다르다는 것을 알 수 있다.)

Python 자료형 종류 - 숫자
- 정수 (Integer)
- 실수 (Floating Point)

Python 자료형 종류 - 컬렉션
- 리스트 (List)
- 딕셔너리 (Dictionary)

Python 자료형 종류 - 기타
- 논리 (Bool)
- 문자열 (String)

변수 (Variable) 란?
- 데이터를 저장하거나 읽어들일 수 있는 공간을 의미한다. (+ 즉, 변수를 활용하면 특정 데이터를 저장 후 필요 할 때
재사용하는 것이 가능하다.)

변수는 메모리 (주 기억 장치) 에 위치하기 때문에 변수에 접근하기 위한 수단이 필요하며 이때 활용되는 것이
변수의 이름이다. (+ 즉, 변수 이름을 통해 특정 변수를 제어하는 것이 가능하다.)

Python 변수 선언 방법
- 변수 이름 + 데이터 할당

Python 은 다른 프로그래밍 언어와 달리 변수를 선언하기 위한 별도의 과정이 필요 없으며 데이터를 할당하는 과정에서
자동으로 변수가 선언되는 특징이 존재한다.

Ex)
nInt = 10
fFloat = 3.14

위와 같이 변수 이름을 명시 한 후 = (할당 연산자) 를 통해 데이터를 할당하면 변수가 선언된다는 것을 알 수 있다.

단, 해당 이름의 변수가 이미 존재 할 경우 새로운 변수를 선언하는 것이 아니라 기존에 선언 된 변수에 데이터를
할당되기 때문에 주의가 필요하다. (+ 즉, 기존에 선언 된 변수에 데이터를 할당 할 경우 해당 변수에 할당 된 데이터를
덮어쓴다는 것을 알 수 있다.)
"""

# Example 2 (자료형)
def start(args):
	nInt = 10
	fFloat = 3.14
	
	"""
	type 키워드란?
	- 변수 or 데이터의 자료형을 가져오는 역할을 수행하는 키워드를 의미한다. (+ 즉, type 키워드를 활용하면
	특정 데이터의 자료형을 검사해서 적절한 처리를 하는 것이 가능하다.)
	
	f 문자열 포맷팅이란?
	- 특정 데이터를 조합해서 단어 or 문장을 작성 할 수 있는 기능을 의미한다. (+ 즉, f 문자열 포맷팅을 활용하면
	다양한 단어 or 문장을 제작하는 것이 가능하다.)
	
	Ex)
	oStr = "Python"
	oWord = f"Hello, {oStr}"
	
	위와 { } 기호를 명시 할 경우 특정 데이터를 조합해서 단어 or 문장을 작성하는 것이 가능하다. (+ 즉,
	{ } 기호 사이에 변수 or 데이터를 명시 할 수 있다는 것을 의미한다.)
	"""
	print("=====> 자료형 - 숫자 <=====")
	print(f"정수 ({type(nInt)}) : {nInt}")
	print(f"실수 ({type(fFloat)}) : {fFloat}")
	
	oList = [ 1, 2, 3, 4, 5 ]
	oDict = { "Key_01": 1, "Key_02": 2, "Key_03": 3 }
	
	print("\n=====> 자료형 - 컬렉션 <=====")
	print(f"리스트 ({type(oList)}) : {oList}")
	print(f"딕셔너리 ({type(oDict)}) : {oDict}")
	
	bIsBool = True
	oStr = "Hello, World!"
	
	print("\n=====> 자료형 - 기타 <=====")
	print(f"논리 ({type(bIsBool)}) : {bIsBool}")
	print(f"문자열 ({type(oStr)}) : {oStr}")
	