import os
import sys

from Example.Example_13.CBase import CBase
from Example.Example_13.CDerived import CDerived

"""
객체 지향 프로그래밍 3 대 요소
- 캡슐화 (+ or 정보 은닉)
- 상속
- 다형성

캡슐화 (+ or 정보 은닉) 란?
- 객체가 지니고 있는 데이터 중 민감한 데이터는 외부로부터 보호하는 개념을 의미한다. (+ 즉, 캡슐화는
보안이 중요한 데이터는 접근을 제한함으로서 객체의 보안성을 높이는 개념이라는 것을 알 수 있다.)

단, Python 은 캡슐화를 직접적으로 지원하는 언어가 아니기 때문에 문법적으로 잘못 된 사용을 막을 방법이 없다는
단점이 존재한다. (+ 즉, 객체가 지니고 있는 멤버를 외부에서 자유롭게 접근하는 것이 가능하다.)

상속이란?
- 클래스 간에 부모/자식 관계를 형성 시키는 개념을 의미한다. (+ 즉, 상속을 활용하면 클래스 간에 상/하 관계가
형성 된다는 것을 알 수 있다.)

클래스가 부모/자식 관계를 형성하면 자식 클래스에서 부모 클래스에 존재하는 멤버를 사용하는 것이 가능하다. (+ 즉,
상속을 활용하면 클래스 별로 중복적으로 정의 되는 멤버를 최소화 시키는 것이 가능하다.)

Python 클래스 상속 방법
- 자식 클래스 + 부모 클래스

Ex)
class CBase:
	# Do Something
	
class CDerived(CBase):
	# Do Something
	
위와 같이 CDerived 클래스는 CBase 클래스를 상속함으로서 CBase 클래스에 존재하는 멤버를 사용하는 것이
가능하다.

다형성이란?
- 사물이 다양한 형태를 띄는 개념을 의미한다. (+ 즉, 다형성을 활용하면 동일한 사물이라 하더라도 조건에 따라
다양한 형태가 된다는 것을 알 수 있다.)

단, Python 은 약한 형식 언어 (Weak Type Language) 이기 때문에 다형성의 개념이 존재하지 않는다. (+ 즉,
변수에 데이터를 할당 할 경우 할당하는 데이터에 맞춰서 내부 구조가 변경 된 다는 것을 알 수 있다.)
"""


# Example 13 (클래스 - 2)
def start(args):
	oBase = CBase(10, 3.14)
	oDerived = CDerived(20, 3.14, "Hello, World!")
	
	print("=====> 부모 클래스 <=====")
	oBase.showInfo()
	
	print("\n=====> 자식 클래스 <=====")
	oDerived.showInfo()
